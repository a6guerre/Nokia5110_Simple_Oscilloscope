/*
 * Display_Engine.c
 *
 *  Created on: May 7, 2020
 *      Author: a6gue
 */
#include <stdint.h>
#include <stdio.h>
#include "Nokia5110.h"
#include "tm4c123gh6pm.h"
#include "SPI_Driver.h"
#include "PLL_Init.h"
#include "ADC_VoltageIn.h"
#include "UART_Driver.h"
#include "Display_Engine.h"
#include "Button.h"
#include "linked_lists.h"
//#include "driverlib/interrupt.h"
#define DEBUG 1
#define NUM_ROWS 3
#define PADDING 3
#define MAX_WIDTH (84 - PADDING)
#define MAPPING_FACTOR(player_width) (float)(MAX_X - player_width)/(3.3)
int j;
int voltages[84];

uint8_t g_pixel_count;
int flag = 0;
int count;
int g_enemyKillCount;
int g_launched;
int g_has_launched;
float mapping;

List *bullet_list; 

extern char Screen[MAX_X*MAX_Y/8]; // buffer stores the next image to be printed on the screenNokia5110.c
extern float voltageIn;
extern uint8_t debounce;

typedef struct enemy
{
  char posX;
  char posY;
  char row;
  const unsigned char* sprite;
}enemyObj;

typedef struct player
{
  char posX;
  char posY;
  char width;
  char height;
  const unsigned char* sprite;
}playerShip;

typedef struct Bullet
{
  char posX;
  char posY;
  uint8_t needShift;
  unsigned char *sprite;
}bullet;

enemyObj enemies[12];
playerShip player;
bullet Bullet = {0,0,0,NULL};

typedef void (*call_back)(void);
call_back f;

void Timer0B_Handler(void)
{
  TIMER0_ICR_R |= 0x00000100;    // Acknowledge Interrupt Timer0B
  debounce = 1;                  // After expired time, it is ok to enable button interrupts
  TIMER0_CTL_R    &=  ~0x100;
}

void Launch_Bullet(void)
{
  appendAtEnd(bullet_list, bullet_list->size);
}

void GPIO_PortE_Handler(void)
{
  GPIO_PORTE_ICR_R |= 0x02;   // Acknowledge Interrupt on PE1
  TIMER1_CTL_R &= ~0x00000001; // Make this atomic to prevent race conditions
  if(debounce)
  {
    //throw bullet
    int count;
    TIMER0_CTL_R    |=  0x100;
    Launch_Bullet();
    debounce = 0;
    g_launched = 1;
  }
  TIMER1_CTL_R |= 0x00000001; // Resume screen refreshing
}

void Display_BMP(const char *data, size_t len)
{
  long width = data[18], height = data[22], i, j;
  int idx;
  j = data[10];  // Byte 10 contains the offset at the bottom left corner of the image
  for(idx = 0; idx < (width*height/2); ++idx)
  {
    LCD_Write(DATA, *data);
    ++data;
  }
}

/*void moveY_Vert(Simple_Object *obj, unsigned char moveY)
{
  //Nokia5110_SetVertAddr();
  //Nokia5110_SetY(obj->posY + moveY);
  Nokia5110_SetX(obj->posX);
  int raw_out = ((unsigned char)obj->posY)%9;
  if( (0x01 << ((unsigned char)raw_out) -1) == 0)
  {
    LCD_Write(DATA, simpleObj.pixel);
  }
  else
  {
    LCD_Write(DATA, (simpleObj.pixel << ((unsigned char)raw_out) - 1));
  }
  ++obj->posY;

  Nokia5110_SetHorizAddr();
}*/

void Initialize_Samples(void)
{
  int i;
  float val = 0.0;
  for(i = 0; i < 84; ++i)
  {
    val += 0.0400;
    voltages[i] = 16*val;
  }
}

void Shift_Right(void)
{
  int idx;
  int isFirstRow = 1;
  char temp, temp_2;
  for(idx = 0; idx < (MAX_X*(MAX_Y/8 - 1)); ++idx)
  {
      // We don't want to shift from top of next row
      // to current row
    if(isFirstRow)
    {
      temp = Screen[idx + 1];
      Screen[idx + 1] = Screen[idx];
      isFirstRow = 0;
    }
    else if((idx%83) != 0)
    {
      temp_2 = Screen[idx + 1];
      Screen[idx + 1] = temp;
      temp = temp_2;
    }
    else
    {
      isFirstRow = 1;
    }
  }

  int x;

  for(x = 0; idx < 12; ++idx)
  {
    enemies[x].posX += 1;
  }
}

void Shift_Left(void)
{
  int idx;

  for(idx = 0; idx < (MAX_X*(MAX_Y/8 - 1)); ++idx)
  {
    // We don't want to shift from top of next row
    // to current row
    if( idx%83 != 0)
    {
      Screen[idx] = Screen[idx + 1];
    }
  }
  int x;
  for(x = 0; idx < 12; ++idx)
  {
    enemies[x].posX -= 1;
  }
}
void Propogate_Bullet(void)
{
  Nokia5110_ClearBMP_Bullet(Bullet.posX, Bullet.posY);
  --Bullet.posY;
  Nokia5110_PrintBMP_Bullet(Bullet.posX, Bullet.posY);
}

void Oscillate_Enemies(void)
{
   static uint8_t toggle = 0;
   static uint8_t counter = 3;
   if(!toggle)
   {
     Shift_Left();
     if(g_has_launched)
     {
       Nokia5110_ClearBMP_Bullet(Bullet.posX - 1, Bullet.posY);
       Nokia5110_PrintBMP_Bullet(Bullet.posX, Bullet.posY);
     }
   }
   else
   {
     Shift_Right();
     if(g_has_launched)
     {
       Nokia5110_ClearBMP_Bullet(Bullet.posX + 1, Bullet.posY);
       Nokia5110_PrintBMP_Bullet(Bullet.posX, Bullet.posY);
     }
   }
   ++counter;
   if(counter == 6)
   {
     toggle  = !toggle;
     counter = 0;
   }
   // Display Updated results
   if(g_launched)
   {
     //Screen[x_offset] |= Bullet.sprite;
     g_has_launched = 1;
     uint8_t x_offset = player.posX + player.width/2;
     Bullet.posX = x_offset;
     Bullet.posY = player.posY - 10;
     Nokia5110_PrintBMP_Bullet(x_offset, player.posY - 10);
     //Nokia5110_PrintScreen(Screen);
     g_launched = 0;
   }
   // let's consider clearing and then re-drawing
   Nokia5110_PrintBMP(player.posX,player.posY, &ClearEnemy[0], 0);
   mapping = (float)(MAX_X - player.width)/(3.3);
   player.posX = (3.3 - voltageIn)*mapping;
   Nokia5110_PrintBMP(player.posX,player.posY, player.sprite, 0);
   Nokia5110_PrintScreen(Screen);
   if(g_has_launched = 1)
   {
       Propogate_Bullet();
   }
}

/*void Animate_Particle(void)
{
  simpleObj.moveY(&simpleObj, 0x01);
  //LCD_Write(DATA, simpleObj.pixel);
}*/

void Sample_Pattern(void)
{
  uint8_t idx;
  if(g_pixel_count < 84*6)
  {
    if(flag == 0) {
      LCD_Write(DATA, 0x02);
    }
    else
    {
      LCD_Write(DATA, 0x00);
    }
  }
  else
  {
    Nokia5110_SetCursor(0,0);
    g_pixel_count = 0;
    LCD_Write(DATA, 0x00);
    flag = 1;
  }
}

void Display_Output(void)
{
  unsigned char y_offset = voltages[g_pixel_count]/9;

  LCD_Write(COMMAND, 0x40|(y_offset));

  int raw_out = ((unsigned char)voltages[g_pixel_count])%9;
  if( (0x01 << ((unsigned char)raw_out) -1) == 0)
  {
    LCD_Write(DATA, 0x01);
  }
  else
  {
    LCD_Write(DATA, (0x01 << ((unsigned char)raw_out) - 1));
  }
  ++g_pixel_count;
  if(g_pixel_count == 84)
  {
    g_pixel_count = 0;
    Clear_Display();  
  } 

}

void Display_Voltage(void)
{

  int mapped_voltage = 16*voltageIn;
  unsigned char y_offset = mapped_voltage/9;

  //Nokia5110_SetCursor((char)g_pixel_count,5);
  LCD_Write(COMMAND, 0x40|(y_offset));

  int raw_out = ((unsigned char)mapped_voltage)%9;
  if( (0x01 << ((unsigned char)raw_out) -1) == 0)
  {
    LCD_Write(DATA, 0x01);
  }
  else
  {
    LCD_Write(DATA, (0x01 << ((unsigned char)raw_out) - 1));
  }
  ++g_pixel_count;
  if(g_pixel_count == 84)
  {
    g_pixel_count = 0;
    Clear_Display();
  }


}

void Timer1A_Handler(void)
{
   TIMER1_ICR_R = TIMER_ICR_TATOCINT;
   // This needs to be atomic, or will affect buffering
   IntMasterDisable();
   f();
   IntMasterEnable();
}

void Timer1A_Config(void)
{
  SYSCTL_RCGC1_R |= SYSCTL_RCGC1_TIMER1;   // activate timer1
  TIMER1_CTL_R &= ~0x00000001;             // disable timer1A and timer 1B during setup
  TIMER1_CFG_R =   0x00000000;             // configure for 32-bit timer mode
  TIMER1_TAMR_R = 0x00000002;              // configure for one shot
  TIMER1_TAILR_R =  0x00FFFFFF;            // The rate at which we display a new pixel on LCD
  TIMER1_TAPR_R =   0xFF;                  // Divide by 80, so we have a 1 Mhz Clock
  TIMER1_ICR_R =  0x00000001;              // clear timer1A and timer 1B timeout flag
  TIMER1_IMR_R |= 0x00000101;              // arm timeout interrupt
  NVIC_PRI5_R = (NVIC_PRI5_R & 0xFFFF00FF)|0x00000400; // priority 2 for both timers
  NVIC_EN0_R |= 0x00200000;                // enable interrupt 19 in NVIC
  TIMER1_CTL_R |= 0x00000001;              // enable timer1A and timer 1B
}

void Initialize_Enemies(void)
{
  int idx1, idx2;
  int x = 0;
  for(idx1 = 0; idx1 < 3; ++idx1)
  {
    for(idx2 = 0; idx2 < 4; ++idx2)
    {
      enemies[x].posX = PADDING + (16*idx2);
      enemies[x].posY = 11*idx1  + 11;
      ++x;
    }
  }
}

void Display_Enemies(void)
{
  int idx = 0;
  for(idx = 0; idx < 12; ++idx)
  {
    Nokia5110_PrintBMP(enemies[idx].posX, enemies[idx].posY, &Enemy10Point1[0], 0);
  }
}

void Display_Driver_Init(void)
{
  Timer1A_Config();
  f = &Oscillate_Enemies;
  Initialize_Samples();
  Initialize_Enemies();
  //DisplayObject(&Enemy10Point1[0], sizeof(Enemy10Point1)/sizeof(Enemy10Point1[0]));
  //Display_Enemies();
  player.posX = 0;
  player.posY = 46;

  player.sprite = &PlayerShip0[0];
  player.width  = PlayerShip0[18];
  player.height = PlayerShip0[22];

  Nokia5110_PrintBMP(player.posX,player.posY, player.sprite, 0);
  Nokia5110_PrintScreen(Screen);
}

int main(void) {
  PLL_Init();
  Hardware_Init();
  UART_Init();
  InitializeNokia5110();
  Button_Config();
  Clear_Display();
  CreateList(&bullet_list);
  Display_Driver_Init();

  while(1)
  {
#ifdef DEBUG
    ++count;
    if(count%100000== 0)
    {
        UART_OutFloat(player.posX);
        UART_OutChar('\n');
        count = 0;
    }
#else
#endif
  }
  return 0;
}
